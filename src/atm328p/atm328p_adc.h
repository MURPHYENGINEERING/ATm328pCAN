#ifndef __ATM328P_ADC_H__
#define __ATM328P_ADC_H__

#include "types.h"


/** ADC Multiplexer Selection Register */
typedef union {
    struct {
        /** Analog Channel Selection bits */
        VBOOL_T MUX0        : 1;
        VBOOL_T MUX1        : 1;
        VBOOL_T MUX2        : 1;
        VBOOL_T MUX3        : 1;
        VBOOL_T Reserved4   : 1;
        /** ADC Left Adjust Result */
        VBOOL_T ADLAR       : 1;
        /** Reference Selection bits */
        VBOOL_T REFS0       : 1;
        VBOOL_T REFS1       : 1;
    } bits;
    VU8_T byte;
} ADMUX_T;
/** ADC Multiplexer Selection Register */
extern volatile ADMUX_T ADMUX;

#define REFS_MASK 0b11000000
#define REFS_AVCC 0b01000000
#define REFS_AREF 0b00000000
#define REFS_INTERNAL_1V1 0b11000000

/** Select ADC channel 0 */
#define ADMUX_ADC0 0b00000000
/** Select ADC channel 1 */
#define ADMUX_ADC1 0b00000001
/** Select ADC channel 2 */
#define ADMUX_ADC2 0b00000010
/** Select ADC channel 3 */
#define ADMUX_ADC3 0b00000011
/** Select ADC channel 4 */
#define ADMUX_ADC4 0b00000100
/** Select ADC channel 5 */
#define ADMUX_ADC5 0b00000101
/** Select ADC channel 6 */
#define ADMUX_ADC6 0b00000110
/** Select ADC channel 7 */
#define ADMUX_ADC7 0b00000111
/** Select ADC channel 8 (Temperature sensor) */
#define ADMUX_TEMPERATURE 0b00001000
/** Select ADC channel 1.1V */
#define ADMUX_1V1  0b00001110
/** Select ADC channel 0V */
#define ADMUX_GND  0b00001111
/** Select bits that set the ADC channel in `ADMUX` */
#define ADMUX_MUX_MASK 0b00001111

/** Select right-adjusted output from the ADC. Right-adjusted results will have
  * the low bits of the result in the low bits of the register. */
#define ADLAR_RIGHT_ADJUST FALSE
/** Select left-adjusted output from the ADC. Left-adjusted results will have
  * the low bits of the result in the high bits of the low byte of the register. */
#define ADLAR_LEFT_ADJUST TRUE


/** ADC Control and Status Register A */
typedef union {
    struct {
        /** ADC Prescaler Select bits (R/W) */
        VBOOL_T ADPS0   : 1;
        VBOOL_T ADPS1   : 1;
        VBOOL_T ADPS2   : 1;
        /** ADC Interrupt Enable (R/W) */
        VBOOL_T ADIE    : 1;
        /** ADC Interrupt Flag (R/W) */
        VBOOL_T ADIF    : 1;
        /** ADC Auto Trigger Enable (R/W) */
        VBOOL_T ADATE   : 1;
        /** ADC Start Conversion (R/W) */
        VBOOL_T ADSC    : 1;
        /** ADC Enable (R/W) */
        VBOOL_T ADEN    : 1;
    } bits;
    VU8_T byte;
} ADCSRA_T;
/** ADC Control and Status Register A */
extern volatile ADCSRA_T ADCSRA;

/** Enable the ADC */
#define ADEN_ENABLE_ADC TRUE

/** Disable interrupts on ADC conversion complete. */
#define ADIE_DISABLE_CONVERSION_INTERRUPT FALSE
/** Enable interrupts on ADC conversion complete. */
#define ADIE_ENABLE_CONVERSION_INTERRUPT TRUE

/** Enable auto trigger mode. */
#define ADATE_ENABLE_AUTO_TRIGGER TRUE
/** Disable auto trigger mode. */
#define ADATE_DISABLE_AUTO_TRIGGER FALSE

/** The ADC is currently converting or should start to convert. */
#define ADSC_CONVERTING TRUE

#define ADPS_PRESCALE_OVER_4 0b00000010


/** ADC Control and Status Register B */
typedef union {
    struct {
        /** ADC Auto Trigger Source bits */
        VBOOL_T ADTS0       : 1;
        VBOOL_T ADTS1       : 1;
        VBOOL_T ADTS2       : 1;
        VBOOL_T Reserved3   : 1;
        VBOOL_T Reserved4   : 1;
        VBOOL_T Reserved5   : 1;
        /** Analog Comparator Multiplexer Enable */
        VBOOL_T ACME        : 1;
        VBOOL_T Reserved7   : 1;
    } bits;
    VU8_T byte;
} ADCSRB_T;
/** ADC Control and Status Register B */
extern volatile ADCSRB_T ADCSRB;

/** Sets the ADC Auto Trigger Source to Free Running. */
#define ADTS_FREE_RUNNING 0b00000000
/** Selects the bits making up the ADC Auto Trigger Source portion of the 
  * `ADCSRB` register. */
#define ADTS_MASK 0b00000111


/** ADC Data Register */
extern volatile HALFWORD_T ADC;
/** Selects only the bits of the ADC data that are actually generated by conversion. */
#define ADC_DATA_MASK 0b0000001111111111
#define ADCL_MASK 0b11111111
#define ADCH_MASK 0b00000011


#endif